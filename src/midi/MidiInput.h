/// MidiInput.h

#pragma once

#include "midi.h"
#include "../graph/graph.h"
#include "../util/RingBuffer.h"
#include <vector>
#include <mutex>

/**
 * @brief MIDI Input
 * @details A MIDI input object that generates MIDI data
 */
class dibiff::midi::MidiInput : public dibiff::graph::AudioObject {
    public:
        /**
         * @brief The MIDI output connection point
         * @details The MIDI output connection point that can be used to connect MIDI objects
         */
        dibiff::graph::MidiOutput* output;
        /**
         * @brief The MIDI messages
         * @details RingBuffer of MIDI messages generated by the MIDI input
         */
        std::unique_ptr<RingBuffer<std::vector<unsigned char>>> midiRingBuffer;
        /**
         * @brief Constructor
         * @details Constructs a MIDI input object
         */
        MidiInput(int blockSize);
        /**
         * @brief Initialize
         * @details Initializes the MIDI input object
         */
        void initialize() override;
        /**
         * @brief Generate a block of samples
         * @details Generates a block of MIDI data
         */
        void process() override;
        /**
         * @brief Reset the MIDI input
         * @details Not used.
         */
        void reset() override {};
        /**
         * @brief Clear the MIDI input
         * @details Not used.
         */
        void clear() override {}
        /**
         * @brief Check if the filter is ready to process
         * @return True if the filter is ready to process, false otherwise
         */
        bool isReadyToProcess() const override;
        /**
         * @brief Check if the MIDI input has finished generating samples
         * @return True if the MIDI input has finished generating samples, false otherwise
         */
        bool isFinished() const override;
        /**
         * Create a new MIDI input object
         */
        static std::unique_ptr<dibiff::midi::MidiInput> create(int blockSize);
        /**
         * @brief Add a MIDI message
         * @details Adds a MIDI message to the MIDI input
         * @param message The MIDI message to add
         */
        void addMidiMessage(const std::vector<std::vector<unsigned char>> message);
    private:
        int blockSize;
};